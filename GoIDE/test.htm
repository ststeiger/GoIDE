<!doctype html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta charset="utf-8">
    <meta http-equiv="cache-control" content="max-age=0" />
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="expires" content="0" />
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
    <meta http-equiv="pragma" content="no-cache" />
    <title>CodeMirror: Go mode</title>
    
    <style type="text/css" media="all">

        html, body, form
        {
            width: 100%;
            height: 100%;
            margin: 0px;
            padding: 0px;
            #min-height: 100% !important;
            #overflow: auto;
        }


        body
        {
            background-color: blue;
        }


        form
        {
            display: block !important;
            float: none !important;
            width: 100% !important;
            height: 100% !important;
            background-color: yellow;
        }


        #wrapper
        {
            display: block !important;
            #display: inline-block;
            float: none !important;
            width: 100%;
            height: 100%;
            background-color: hotpink !important;
            outline: 1px solid;
            outline-color: hotpink;
        }

    </style>

</head>
<body>
    <!--
    <form>
        -->
        <div id="wrapper">
            zrdz
            <!--
            <textarea id="code" name="code">
                // Prime Sieve in Go.
                // Taken from the Go specification.
                // Copyright © The Go Authors.

                package main

                import "fmt"

                // Send the sequence 2, 3, 4, ... to channel 'ch'.
                func generate(ch chan&lt;- int) {
                for i := 2; ; i++ {
                ch &lt;- i  // Send 'i' to channel 'ch'
                }
                }

                // Copy the values from channel 'src' to channel 'dst',
                // removing those divisible by 'prime'.
                func filter(src &lt;-chan int, dst chan&lt;- int, prime int) {
                for i := range src {    // Loop over values received from 'src'.
                if i%prime != 0 {
                dst &lt;- i  // Send 'i' to channel 'dst'.
                }
                }
                }

                // The prime sieve: Daisy-chain filter processes together.
                func sieve() {
                ch := make(chan int)  // Create a new channel.
                go generate(ch)       // Start generate() as a subprocess.
                for {
                prime := &lt;-ch
                fmt.Print(prime, "\n")
                ch1 := make(chan int)
                go filter(ch, ch1, prime)
                ch = ch1
                }
                }

                func main() {
                sieve()
                }
            </textarea>
            -->
            </div>
    <!--
</form>
        -->

  </body>
</html>
